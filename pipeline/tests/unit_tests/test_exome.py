"""Unit tests for exome.py."""

from __future__ import annotations

from askcell.dna.exome import make_commands_sample_analysis
from askcell.utils.pathutils import Path
from askcell.utils.shellutils import Command, ShellLiteral


def test_make_commands_sample_analysis() -> None:
    """Test make commands for exome sample analysis."""
    observed = make_commands_sample_analysis(
        sampleid="Test_S1",
        reference="reference.fa",
        reference_index="reference.fa.fai",
        reference_dict="reference.fa.dict",
        target="target.bed",
        known_sites="known_sites.bed",
        read1="r1.bam",
        read2="r2.bam",
        aligned_read="aligned.bam",
        aligned_log="aligned.log",
        recalib_read="recalib.bam",
        recalib_table="recalib.table",
        dedup_metrics="dedup.metrics.tsv",
        hsmetrics="hs.metrics.tsv",
        base_coverage="base.cov",
        target_coverage="target.cov",
        calls="calls.vcf.gz",
        scratch_dir="scratch",
        threads=8,
    )

    expected = [
        Command(
            "bwa",
            "mem",
            "-t",
            8,
            "-K",
            1000000,
            "reference.fa.fai",
            "r1.bam",
            "r2.bam",
            "-M",
            "-R",
            "@RG\\tID:Test_S1\\tSM:Test_S1\\tLB:WES\\tPL:Illumina\\tPU:run",
            ShellLiteral("2>"),
            "aligned.log",
            ShellLiteral("|"),
            "samtools",
            "view",
            "-b",
            "-h",
            ShellLiteral("|"),
            "samtools",
            "sort",
            "--threads",
            8,
            "-o",
            "aligned.bam",
            "--output-fmt",
            "BAM",
        ),
        Command(
            "samtools",
            "view",
            "-b",
            "-h",
            "-o",
            Path("scratch/Test_S1.q20.bam"),
            "--output-fmt",
            "BAM",
            "-q",
            20,
            "aligned.bam",
        ),
        Command(
            "samtools",
            "index",
            "-@",
            1,
            "-b",
            Path("scratch/Test_S1.q20.bam"),
        ),
        Command(
            "picard",
            "MarkDuplicates",
            "--INPUT",
            Path("scratch/Test_S1.q20.bam"),
            "--METRICS_FILE",
            "dedup.metrics.tsv",
            "--OUTPUT",
            Path("scratch/Test_S1.dedup.bam"),
        ),
        Command(
            "samtools",
            "index",
            "-@",
            1,
            "-b",
            Path("scratch/Test_S1.dedup.bam"),
        ),
        Command(
            "picard",
            "BedToIntervalList",
            "-I",
            Path("target.bed"),
            "-O",
            Path("scratch/target.intervals"),
            "-SD",
            "reference.fa.dict",
            ShellLiteral(";"),
            "picard",
            "BedToIntervalList",
            "-I",
            Path("target.bed"),
            "-O",
            Path("scratch/target.intervals"),
            "-SD",
            "reference.fa.dict",
            ShellLiteral(";"),
            "picard",
            "CollectHsMetrics",
            "--INPUT",
            Path("scratch/Test_S1.dedup.bam"),
            "--OUTPUT",
            "hs.metrics.tsv",
            "--REFERENCE_SEQUENCE",
            "reference.fa",
            "--COVERAGE_CAP",
            100000,
            "--MINIMUM_BASE_QUALITY",
            20,
            "--MINIMUM_MAPPING_QUALITY",
            20,
            "--BAIT_INTERVALS",
            Path("scratch/target.intervals"),
            "--TARGET_INTERVALS",
            Path("scratch/target.intervals"),
            "--PER_BASE_COVERAGE",
            "base.cov",
            "--PER_TARGET_COVERAGE",
            "target.cov",
        ),
        Command(
            "gatk",
            "BaseRecalibrator",
            "-R",
            "reference.fa",
            "-I",
            Path("scratch/Test_S1.dedup.bam"),
            "-O",
            "recalib.table",
            "--known-sites",
            Path("known_sites.bed"),
            "--intervals",
            Path("target.bed"),
            ShellLiteral(";"),
            "gatk",
            "ApplyBQSR",
            "-R",
            "reference.fa",
            "-I",
            Path("scratch/Test_S1.dedup.bam"),
            "-O",
            "recalib.bam",
            "--bqsr-recal-file",
            "recalib.table",
        ),
        Command(
            "gatk",
            "HaplotypeCaller",
            "-R",
            "reference.fa",
            "-I",
            "recalib.bam",
            "-O",
            "calls.vcf.gz",
            "--min-base-quality-score",
            10,
            "--intervals",
            Path("target.bed"),
            "--dont-use-soft-clipped-bases",
            "--max-reads-per-alignment-start",
            0,
            "-G",
            "StandardAnnotation",
        ),
    ]

    assert observed == expected
