"""scRNA-seq request-related functions and dataclasses."""

from __future__ import annotations

import csv

from dataclasses import dataclass, field
from enum import Enum
from typing import Any, Mapping

import pandas as pd

from .. import Path, PathLike, parse_path
from ..utils.rowcontainer import RowContainer
from ..utils.types import MutableStrMapping


class Instrument(Enum):
    """Enumeration of the DeepCell instrument name."""

    ARIES = "aries"
    GEMINI = "gemini"
    LEO = "leo"
    TAURUS = "taurus"
    EMPTY = "."


class MultiWell(Enum):
    """Enumeration of the multi-well channel, wells 1 thru 6."""

    WELL1 = "1"
    WELL2 = "2"
    WELL3 = "3"
    WELL4 = "4"
    WELL5 = "5"
    WELL6 = "6"


@dataclass
class AnalysisRequest:
    """Class to contain the scRNA-seq request parameters.

    JIRA service desk ticket asks the ticket submitter to fill out
    the scRNA-seq analysis request, available as web form.
    The form includes the analysis-specific information such as runid,
    to be used during the analysis.

    Attributes:
        request: full request object
        version: request template version
        runid: run identifier
        issueid: issue identifier, autogenerated from request template submission
        include_intron: if set True, include intron in the count

    """

    request: MutableStrMapping
    version: str
    runid: str
    issueid: str
    max_mito_pct_allowed: int
    max_ribo_pct_allowed: int
    n_pcs: int
    n_neighbors: int
    include_intron: bool
    regress_out_cellcycle: bool
    samples: RowContainer[Sample] = field(init=False)

    def __init__(self, filename: PathLike) -> None:
        """Parse analysis request.

        FIXME: currently, prototype template contains basic fields, run id and intron use.

        Args:
            filename: filename of request file

        """
        self.request: MutableStrMapping = pd.read_excel(filename).iloc[0].to_dict()
        self.version: str = self.request.get("Request template version") or "NotAvailable"
        self.runid: str = self.request["Sequencing Run ID"]
        self.issueid: int = self.request["Issue Key"]
        # FIXME: current web-submitted template has this key-value, officially roll-out v0.0.1 template to use
        self.include_intron: bool = self.request["Include intron during count generation"] == "Yes"
        self.regress_out_cellcycle: bool = self.request["Include cell cycle genes during regression"] == "Yes"
        self.max_mito_pct_allowed: int = int(self.request["Specify mitochondrial % to exclude"].split(",")[-1])
        self.max_ribo_pct_allowed: int = int(self.request["Specify ribosomal % to exclude"].split(",")[-1])
        self.n_pcs: int = int(self.request["Number of principal components to compute"].split(",")[-1])
        self.n_neighbors: int = int(self.request["Number of neighbors"].split(",")[-1])

    def load_sample_metadata(self, filename: PathLike) -> None:
        """Load sample in a metadata to sample container."""
        with open(filename) as csvfile:
            self.samples = RowContainer(
                Sample,
                (Sample(row) for row in csv.DictReader(csvfile, delimiter="\t")),
            )


@dataclass
class Sample:
    """Class to contain the sample information.

    Attributes:
        name: sample name
        sid: sample identifier, default = sample name
        platform: assay platform for scRNA-seq, default is 10X
        runid: sequencing run identifier
        index1: index1 read, for demux
        index2: index2 read, for demux
        label: sample label enriched for from sorting
        well: wells 0 to 6, if multi-well channel is used
        instrument: Instrument, if used
        raw_count: path to raw count in h5

    """

    name: str
    sid: str
    platform: str
    runid: str
    index1: str | None = None
    index2: str | None = None
    label: str | None = None
    well: MultiWell | None = None
    instrument: Instrument | None = None
    raw_count: Path | None = None
    local_count: Path = field(init=False)

    def __init__(self, data: Mapping[str, Any]) -> None:
        """Initialize sample object from parsed data."""
        self.name = data["SampleName"]
        self.runid = data["RunID"]
        self.sid = data.get("SampleID") or self.name
        self.platform = data.get("Platform") or "10X"
        self.index1 = data.get("Index1")
        self.index2 = data.get("Index2")
        self.label = data.get("SampleType")
        raw_count = data.get("Count")
        self.raw_count = parse_path(raw_count) if raw_count is not None else None

        well = data.get("Well")
        instrument = data.get("Instrument")
        instrument = None if instrument == "." else instrument
        self.well = MultiWell(well) if well is not None else well
        self.instrument = Instrument(instrument.lower()) if instrument is not None else instrument


@dataclass
class ChromiumIndex:
    """Class to contain the chromium index information.

    Attributes:
        name: index name
        index1: index1 read, for demux
        index2_A: index2 read, for demux
        index2_B: index2 read in reverse complement

    """

    name: str
    index1: str | None = None
    index2_A: str | None = None
    index2_B: str | None = None

    def __init__(self, data: Mapping[str, Any]) -> None:
        """Initialize index object from parsed data."""
        self.name = data["Name"]
        self.index1 = data.get("Index_i7")
        self.index2_A = data.get("Index2_A_i5")
        self.index2_B = data.get("Index2_B_i5")
